apply plugin: 'com.android.application'
apply from: "../gradle/mine/upgrade.gradle"
apply from: "../gradle/mine/packaging.gradle"
apply from: "../gradle/mine/sourceSet.gradle"

/*也可以不写直接引入 但是这样写规范些  易读*/
def androidArr = rootProject.ext.android
def switchArr = rootProject.ext.switches
def dependenciesArr = rootProject.ext.dependencies

android {
    compileSdkVersion androidArr.compileSdkVersion
    buildToolsVersion androidArr.buildToolsVersion
    defaultConfig {
        applicationId androidArr.applicationId
        minSdkVersion androidArr.minSdkVersion
        targetSdkVersion androidArr.targetSdkVersion
        versionCode androidArr.versionCode
        versionName androidArr.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // 分包
        multiDexEnabled true
        // 3.0之后必须要保证所有的flavor 都属于同一个维度
        flavorDimensions "default"

        // 让我的Java代码也可以用
        // 给Java代码暴漏，标记，正式环境 和 测试环境 的标记
        // 组件化 和 集成化 的时候需要
        buildConfigField("boolean", "ISRELEASE", String.valueOf(switchArr.isRelease))
    }

    dexOptions {
        //最大堆内存
        javaMaxHeapSize "8g"
        //是否支持大工程模式
        jumboMode = true
        //预编译
        preDexLibraries = true
        //线程数
        threadCount = 8
        //让它不要对Lib做preDexing
        preDexLibraries = false
    }

    /*支持jdk1.8*/
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'

    // 一行搞定300行 循环搞定
    dependenciesArr.each { k, v -> implementation v }

}
